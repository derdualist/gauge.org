---
layout: post
post_title: Testing with headless chrome
date: 2017-07-12
tags: 
excerpt: "The new headles feature in Chrome 59, makes it easy to run gauge with selenium on a CI/CD setup or Docker instances without having to use.
"
summary_image: "/assets/images/blog/gauge_blog_headless-chrome_small.jpg"
author_name: "Zabil Maliackal"
author_image: "https://cdn-images-1.medium.com/fit/c/100/100/1*tpbiaLHohL5UbeRbfw3hFw.jpeg"

title: "Testing with Headless Chrome | Gauge Blog"
title_tag_of_header: "Testing with Headless Chrome | Gauge Blog"

meta_description: "This post is about the headless feature in Chrome 59 and how to run gauge with selenium on a CI/CD setup or Docker instances."
meta_keywords: "Gauge headless, Chrome 59, CI/CD, Docker, headless acceptance testing"
overridden_canonical_url: "https://blog.getgauge.io/testing-with-headless-chrome-9698cf56fdf9"
---
#### Jul 12, 2017 | Zabil Maliackal

<%= image_tag "blog/gauge_blog_headless-chrome_large.jpg", {:title => "Testing with headless chrome", :alt => "Testing with headless chrome"} %>

# Testing with headless chrome



The new [headless](https://developers.google.com/web/updates/2017/04/headless-chrome) feature in Chrome 59, makes it easy to run gauge with selenium on a CI/CD setup or Docker instances without having to use [xfvb](https://en.wikipedia.org/wiki/Xvfb).

## Java

For [Maven](https://maven.apache.org) add the following dependencies to pom.xml.

    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>3.4.0</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>io.github.bonigarcia</groupId>
        <artifactId>webdrivermanager</artifactId>
        <version>1.7.1</version>
    </dependency>

For [Gradle](https://gradle.org) add dependencies to build.gradle

    dependencies {
       compile 'org.seleniumhq.selenium:selenium-java:3.4.0'
        compile 'io.github.bonigarcia:webdrivermanager:1.7.1'
    }

webdrivermanager is a library that [automatically](https://github.com/bonigarcia/webdrivermanager) downloads and manages chromedriver.

Initialize WebDriver with arguments for headless mode and run tests.

    public class DriverFactory {
       public static WebDriver getDriver() {
            ChromeDriverManager.getInstance().setup();

            ChromeOptions options = new ChromeOptions();
            options.addArguments("--headless");
            options.addArguments("--disable-gpu");

            return new ChromeDriver(options);
        }
    }

## Ruby

If you are using [bundler](https://bundler.io) add this to your Gemfile

    source 'https://rubygems.org'

    group :test do
        gem 'selenium-webdriver'
        gem 'test-unit'
        gem 'chromedriver-helper'
    end

And initialize a driver

    require 'selenium-webdriver'

    module Driver
        def driver
            options = Selenium::WebDriver::Chrome::Options.new

            options.add_argument('--headless')
            options.add_argument('--disable-gpu')

            Selenium::WebDriver.for :chrome, options: options    
        end

    end

## Gauge

Gauge sets all of this via [project templates](https://docs.getgauge.io/using.html?highlight=template#gauge-project-templates)!

For a maven selenium project run

    $ gauge init java_maven_selenium
    $ cd <projectdirectory>
    $ headless=Y gauge run specs

Or for setting up a ruby project

    $ gauge init ruby_selenium
    $ headless=Y bundle exec gauge run specs

## Screenshot on failure

By default, Gauge captures the screen display. In headless mode, the browser is not launched into a display, use getScreenShotAs method in WebDriver to capture the browserâ€™s screenshot instead.

For Gauge, implement a [custom screenshot](https://docs.getgauge.io/language.html#taking-custom-screenshots) handler.

    CustomScreenGrabber implements ICustomScreenshotGrabber {
        public byte[] takeScreenshot() {
            // DriverFactory is a custom class to manage WebDriver instances
            // and may vary between projects.
            WebDriver driver = DriverFactory.getDriver();
            return ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
        }
    }

Have fun setting up tests in headless mode!

*[Gauge](//gauge.org) is a free and open source test automation framework that takes the pain out of acceptance testing. [Download](//gauge.org/get_started) it or read [documentation](https://docs.gauge.org) to get started!*